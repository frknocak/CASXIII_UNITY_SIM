//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input Action/JoystickController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @JoystickController: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @JoystickController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""JoystickController"",
    ""maps"": [
        {
            ""name"": ""ZimaControls"",
            ""id"": ""cb80934f-e10a-49cb-b898-e889da9f916e"",
            ""actions"": [
                {
                    ""name"": ""RightJoystick"",
                    ""type"": ""Value"",
                    ""id"": ""80fdab3d-cf37-47be-b0b6-99d8d524129a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftJoystick"",
                    ""type"": ""Value"",
                    ""id"": ""56b4fcf2-2d04-4b8c-bf59-56e872464abc"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5ed25ab2-a974-4bb6-bf44-4d16511f150e"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightJoystick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""57ace5c7-2fc8-434f-b43a-0664cc6dc3bb"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftJoystick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // ZimaControls
        m_ZimaControls = asset.FindActionMap("ZimaControls", throwIfNotFound: true);
        m_ZimaControls_RightJoystick = m_ZimaControls.FindAction("RightJoystick", throwIfNotFound: true);
        m_ZimaControls_LeftJoystick = m_ZimaControls.FindAction("LeftJoystick", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ZimaControls
    private readonly InputActionMap m_ZimaControls;
    private List<IZimaControlsActions> m_ZimaControlsActionsCallbackInterfaces = new List<IZimaControlsActions>();
    private readonly InputAction m_ZimaControls_RightJoystick;
    private readonly InputAction m_ZimaControls_LeftJoystick;
    public struct ZimaControlsActions
    {
        private @JoystickController m_Wrapper;
        public ZimaControlsActions(@JoystickController wrapper) { m_Wrapper = wrapper; }
        public InputAction @RightJoystick => m_Wrapper.m_ZimaControls_RightJoystick;
        public InputAction @LeftJoystick => m_Wrapper.m_ZimaControls_LeftJoystick;
        public InputActionMap Get() { return m_Wrapper.m_ZimaControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ZimaControlsActions set) { return set.Get(); }
        public void AddCallbacks(IZimaControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_ZimaControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ZimaControlsActionsCallbackInterfaces.Add(instance);
            @RightJoystick.started += instance.OnRightJoystick;
            @RightJoystick.performed += instance.OnRightJoystick;
            @RightJoystick.canceled += instance.OnRightJoystick;
            @LeftJoystick.started += instance.OnLeftJoystick;
            @LeftJoystick.performed += instance.OnLeftJoystick;
            @LeftJoystick.canceled += instance.OnLeftJoystick;
        }

        private void UnregisterCallbacks(IZimaControlsActions instance)
        {
            @RightJoystick.started -= instance.OnRightJoystick;
            @RightJoystick.performed -= instance.OnRightJoystick;
            @RightJoystick.canceled -= instance.OnRightJoystick;
            @LeftJoystick.started -= instance.OnLeftJoystick;
            @LeftJoystick.performed -= instance.OnLeftJoystick;
            @LeftJoystick.canceled -= instance.OnLeftJoystick;
        }

        public void RemoveCallbacks(IZimaControlsActions instance)
        {
            if (m_Wrapper.m_ZimaControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IZimaControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_ZimaControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ZimaControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ZimaControlsActions @ZimaControls => new ZimaControlsActions(this);
    public interface IZimaControlsActions
    {
        void OnRightJoystick(InputAction.CallbackContext context);
        void OnLeftJoystick(InputAction.CallbackContext context);
    }
}
